
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由亚萌智能表单代码生成工具生成。
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。除非此项目不再使用代码生成器生成。
//     如果想修改此文件的方法，请在此文件的上级目录中的WeatherNodesDAL重写(override)该方法。
//     如有问题联系zongeasy@qq.com
//
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data;
using System.ComponentModel;
using Yamon.Framework.DBUtility;
using System.Collections;
using Yamon.Framework.Common.DataBase;
using Yamon.Framework.Common;
using Yamon.Framework.Common.IO;
using System.IO;
using System.Linq.Expressions;
using Yamon.Framework.DAL;
using Yamon.Module.Weather.Entity;

namespace Yamon.Module.Weather.DAL
{
    /// <summary>
    /// 共享资源分类实体类
    ///</summary>
    public partial class _WeatherNodesDAL : BaseModelDAL<WeatherNodes>
    {
        public _WeatherNodesDAL():base("UCenter")
        {
        }

		/// <summary>
        /// 所属栏目（ParentID）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_ParentID
		{
			get
			{
			    Yamon.Module.Weather.DAL.WeatherNodesDAL dal = new Yamon.Module.Weather.DAL.WeatherNodesDAL();
                string cacheKey = dal.CacheKeyPrefix + "NameValue_WeatherNodes";
                object obj=CacheHelper.Get(cacheKey);
                if (obj == null)
                {
                   obj= dal.GetAllEntityTable("NodeID,NodeName").ToNameValueCollection();
                   CacheHelper.Insert(cacheKey,obj);
                }
                return (MyNameValueCollection) obj;

			}
		}
		/// <summary>
        /// 栏目类型（NodeType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_NodeType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "容器栏目");
                nv.Add("1", "图片栏目");
                nv.Add("2", "文档栏目");
                nv.Add("8", "文本栏目");
                nv.Add("3", "外部链接");
                nv.Add("4", "天气栏目");
                nv.Add("5", "指数栏目");
                nv.Add("6", "自动站栏目");
                nv.Add("7", "预警栏目");
                nv.Add("10", "预报栏目");
                return nv;

			}
		}
		/// <summary>
        /// 数据来源（DataSourceType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_DataSourceType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("Cimiss", "Cimiss接口");
                nv.Add("BaoShan", "宝山接口");
                nv.Add("BaoShanShared", "宝山共享图片");
                nv.Add("LocalHost", "本地");
                nv.Add("NumForecast", "数值预报");
                nv.Add("Other", "其它");
                return nv;

			}
		}
		/// <summary>
        /// 是否接入（isDataAccess）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_isDataAccess
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "否");
                nv.Add("1", "是");
                return nv;

			}
		}
		/// <summary>
        /// 录入方式（IsImportToDB）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_IsImportToDB
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("2", "手动录入");
                nv.Add("0", "远程接入");
                nv.Add("1", "监控入库");
                return nv;

			}
		}
		/// <summary>
        /// 是否定时（IsTiming）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_IsTiming
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "否");
                nv.Add("1", "是");
                return nv;

			}
		}
		/// <summary>
        /// 定时类型（TimingType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_TimingType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "循环");
                nv.Add("1", "指定时次");
                return nv;

			}
		}
		/// <summary>
        /// 制作周期类型（CreateUnit）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_CreateUnit
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("年", "年");
                nv.Add("季度", "季度");
                nv.Add("月", "月");
                nv.Add("旬", "旬");
                nv.Add("天", "天");
                nv.Add("小时", "小时");
                nv.Add("分钟", "分钟");
                return nv;

			}
		}
		/// <summary>
        /// 是否加入监控（IsMonitor）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_IsMonitor
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "否");
                nv.Add("1", "是");
                return nv;

			}
		}
		/// <summary>
        /// 是否重命名（IsRename）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_IsRename
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "否");
                nv.Add("1", "是");
                return nv;

			}
		}
		/// <summary>
        /// 打开方式（OpenType）字段的数据集合（键值对）
        /// </summary>
		public MyNameValueCollection NameValue_OpenType
		{
			get
			{
			    MyNameValueCollection nv=new MyNameValueCollection();
                nv.Add("0", "原窗口");
                nv.Add("1", "新窗口");
                return nv;

			}
		}




		/// <summary>
		/// 获取分页的数据实体列表
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>实体列表</returns>
		public virtual List<WeatherNodes> GetEntityListByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="NodeID,ParentID,NodeName,NodeType,NodePicUrl,Tips,Description,isDataAccess,OrderID,IsImportToDB,IsTiming,SubPlanDesc,IsMonitor,IsRename";
			return GetEntityListByPage("1=1 "+ where, searchParams,order,fields, rows,page,topN,out totalRows);
		}

		/// <summary>
		/// 获取分页的数据列表DataTable
		///</summary>
		/// <param name="totalRows">记录总条数（out）</param>
		/// <param name="nv">页面传递参数集合</param>
		/// <param name="topN">数据条数</param>
		/// <param name="page">页码</param>
		/// <param name="rows">每页记录数</param>
		/// <param name="orderBy">排序</param>
		/// <returns>DataTable</returns>
		public virtual DataTable GetEntityTableByPage(out int totalRows,int topN = 0, int page=1,int rows=20,string orderBy="")
		{
			string order = "";
			if (!string.IsNullOrEmpty(orderBy))
			{
				order = orderBy;
			}
			object[] searchParams;
			string where = GetSearchSql("", out searchParams);
			string fields="NodeID,ParentID,NodeName,NodeType,NodePicUrl,Tips,Description,isDataAccess,OrderID,IsImportToDB,IsTiming,SubPlanDesc,IsMonitor,IsRename";
			return GetEntityTableByPage("1=1 "+ where, searchParams,order,fields,rows,page,topN,out totalRows);
		}

		/// <summary>
        /// 拼接查询Sql语句及参数
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="notIn">排除字段</param>
        /// <param name="arrParam">out查询参数</param>
        /// <returns>查询Sql语句</returns>
		public virtual string GetSearchSql(string notIn,out object[] arrParam)
		{
			StringBuilder sb=new StringBuilder();
			string value="";
			string value1 = "";
			string value2 = "";
			ArrayList param=new ArrayList();
			
			
			//IsImportToDB
			if (!("," + notIn.ToLower() + ",").Contains(",isimporttodb,"))
			{
				value = RequestHelper.GetString("IsImportToDB");
				if (!string.IsNullOrEmpty(value))
				{
				 sb.Append(" AND [`IsImportToDB`]=?");
				  param.Add(value);
				}
			}
			arrParam=param.ToArray();
			return sb.ToString();

		}

		
	    public virtual WeatherNodes GetModelValue(WeatherNodes model)
        {
            return model;
        }
		/// <summary>
        /// 设置共享资源分类实体(WeatherNodes)的显示值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetModelShowValue(WeatherNodes model,bool clearValue=false)
        {
            model=GetModelValue(model);
			if (model.ParentID!=null)
			{
				model.ParentID_ShowValue=NameValue_ParentID.Get(model.ParentID.ToString());
			}
			if (model.NodeType!=null)
			{
				model.NodeType_ShowValue=NameValue_NodeType.Get(model.NodeType.ToString());
			}
			if (model.DataSourceType!=null)
			{
				model.DataSourceType_ShowValue=NameValue_DataSourceType.Get(model.DataSourceType.ToString());
			}
			if (model.isDataAccess!=null)
			{
				model.isDataAccess_ShowValue=NameValue_isDataAccess.Get(model.isDataAccess.ToString());
			}
			if (model.IsImportToDB!=null)
			{
				model.IsImportToDB_ShowValue=NameValue_IsImportToDB.Get(model.IsImportToDB.ToString());
			}
			if (model.IsTiming!=null)
			{
				model.IsTiming_ShowValue=NameValue_IsTiming.Get(model.IsTiming.ToString());
			}
			if (model.TimingType!=null)
			{
				model.TimingType_ShowValue=NameValue_TimingType.Get(model.TimingType.ToString());
			}
			if (model.CreateUnit!=null)
			{
				model.CreateUnit_ShowValue=NameValue_CreateUnit.Get(model.CreateUnit.ToString());
			}
			if (model.IsMonitor!=null)
			{
				model.IsMonitor_ShowValue=NameValue_IsMonitor.Get(model.IsMonitor.ToString());
			}
			if (model.IsRename!=null)
			{
				model.IsRename_ShowValue=NameValue_IsRename.Get(model.IsRename.ToString());
			}
			if (model.OpenType!=null)
			{
				model.OpenType_ShowValue=NameValue_OpenType.Get(model.OpenType.ToString());
			}
			if(clearValue)
			{
				model.ParentID = null;
				model.NodeType = null;
				model.DataSourceType = null;
				model.isDataAccess = null;
				model.IsImportToDB = null;
				model.IsTiming = null;
				model.TimingType = null;
				model.CreateUnit = null;
				model.IsMonitor = null;
				model.IsRename = null;
				model.OpenType = null;
			}
			return model;
		}
		
		/// <summary>
        /// 设置共享资源分类实体(WeatherNodes)的列表显示值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetModelGridShowValue(WeatherNodes model){
			model=GetModelShowValue(model);
			return model;
        }

        public virtual WeatherNodes GetInfoByID(object id){
            WeatherNodes model = GetModelByID(id);
            model = GetModelShowValue(model);
            return model;
        } 


      #region 新建相关方法
		/// <summary>
        /// 设置新增入库时共享资源分类实体(WeatherNodes)默认值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetInsertModelValue(WeatherNodes model)
		{
			model.NodeID =(GetMaxID());
			model.channel = "share";
			model.TimingType =0;
			model.CreateUnit = "小时";
			return model;
		}		/// <summary>
        /// 设置新建页面的共享资源分类实体(WeatherNodes)默认值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetCreateFormDefaultValue()
		{
            WeatherNodes model = new WeatherNodes();
			model.channel="share";
			model.NodeType=1;
			model.DataSourceType="LocalHost";
			model.isDataAccess=0;
			model.OrderID=0;
			model.IsImportToDB=2;
			model.IsTiming=0;
			model.TimingType=0;
			model.CreateUnit="小时";
			model.Deley=0;
			model.IsMonitor=0;
			model.IsRename=0;
			model.OpenType=0;
            return model;
		}

		/// <summary>
        /// 新建数据格式验证
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        public virtual void CreateFormValidator(WeatherNodes model)
        {
			string value="";
			
			//NodeID验证
			value = model.NodeID!=null ? model.NodeID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("节点ID不能为空！");
		            }
			
			//ParentID验证
			value = model.ParentID!=null ? model.ParentID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//NodeType验证
			value = model.NodeType!=null ? model.NodeType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("栏目类型不能为空！");
		            }
			
			//IsMonitor验证
			value = model.IsMonitor!=null ? model.IsMonitor.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否加入监控不能为空！");
		            }
			
			//IsRename验证
			value = model.IsRename!=null ? model.IsRename.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否重命名不能为空！");
		            }
}
      #endregion

      #region 修改相关方法
		/// <summary>
        /// 设置更新入库时共享资源分类实体(WeatherNodes)默认值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetUpdateModelValue(WeatherNodes model)
		{
			model.channel =null;
			model.TimingType =null;
			model.CreateUnit =null;
			model.StartPeriod =null;
			model.PeriodStr =null;
			model.CreatePeriod =null;
			return model;
		}		/// <summary>
        /// 设置编辑页面的共享资源分类实体(WeatherNodes)默认值
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        /// <returns>共享资源分类实体(WeatherNodes)</returns>
		public virtual WeatherNodes GetEditFormDefaultValue(WeatherNodes model)
		{
			return model;
		}

		/// <summary>
        /// 编辑数据格式验证
        /// </summary>
        /// <param name="model">共享资源分类实体(WeatherNodes)</param>
        public virtual void EditFormValidator(WeatherNodes model)
        {
			string value="";
			
			//ParentID验证
			value = model.ParentID!=null ? model.ParentID.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("所属栏目不能为空！");
		            }
			
			//NodeType验证
			value = model.NodeType!=null ? model.NodeType.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("栏目类型不能为空！");
		            }
			
			//IsMonitor验证
			value = model.IsMonitor!=null ? model.IsMonitor.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否加入监控不能为空！");
		            }
			
			//IsRename验证
			value = model.IsRename!=null ? model.IsRename.ToString() : "";
		            if ( string.IsNullOrEmpty(value))
		            {
		             throw new Exception("是否重命名不能为空！");
		            }
}
      #endregion



        /// <summary>
        /// 获取异步树共享资源分类实体(WeatherNodes)列表
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>共享资源分类实体(WeatherNodes)列表</returns>
		public virtual List<WeatherNodes> GetAsyncModelTreeList(object parentId,string fields="")
		{
			return GetAsyncTreeList(parentId, fields).ToObjectList<WeatherNodes>();
			
		}
		
		
        /// <summary>
        /// 获取异步树列表(DataTable)
        /// </summary>
        /// <param name="nv">页面传递的参数集合</param>
        /// <param name="parentId">上级菜单</param>
        /// <param name="fields">字段列表</param>
        /// <returns>DataTable</returns>
		public virtual DataTable GetAsyncTreeList(object parentId,string fields="")
		{
			if (string.IsNullOrEmpty(fields))
			{
				fields = AllFields;
			}
			object[] parentParam = new object[] { parentId,parentId };
			string sql = @"select {0},ChildCount from Weather_Nodes as a left join
			(select ParentID as __ParentID,count(1) as ChildCount from Weather_Nodes where ParentID in(
			SELECT  NodeID  FROM Weather_Nodes where  ParentID=?) group by ParentID) as b
			on a.NodeID=b.__ParentID where  a.ParentID=?";
			sql = string.Format(sql, fields);
			return Db.ExecuteDataTableSqlEx(sql, parentParam);
		}
        /// <summary>
        /// 更新为树级实体列表
        /// </summary>
        /// <param name="list">实体列表</param>
        /// <returns>树级实体列表</returns>
		public List<WeatherNodes> ModelListToTree(List<WeatherNodes> list)
		{
			//查找父节点
			List<WeatherNodes> rootType = list.Where(o => o.ParentID == 0).OrderBy(o => o.OrderID ).ToList();
			//递归主函数
			Action<WeatherNodes> addChild = null;
			addChild = (info =>
				{
					var childInfo = list.Where(o => o.ParentID == info.NodeID).OrderBy(o => o.OrderID );
					if (childInfo.Count() == 0)
						return;
					childInfo.All(o =>
					{
						if (info.Children == null)
						{
							info.Children=new List<WeatherNodes>();
						}
						info.Children.Add(o);
						addChild(o);
						return true;
					});
				});
			//递归调用
			rootType.ForEach(o => { addChild(o); });
			return rootType;
		}
		
		// <summary>
        /// 获取树级实体列表
        /// </summary>
        /// <returns>树级实体列表</returns>
        public List<WeatherNodes> GetModelTreeList()
        {
            List<WeatherNodes> list = GetAllEntityList();
            return ModelListToTree(list);
        }

        /// <summary>
        /// 保存编辑树
        /// </summary>
        /// <param name="id"></param>
        /// <param name="targetId"></param>
        /// <param name="point"></param>
        /// <returns></returns>
        public int SaveEditTree(int id, string targetId, string point)
        {
            WeatherNodes targetModel = GetModelByID(targetId);
            int parentId=0;
            int orderId = 0;
            if (point == "append")
            {
                parentId = targetModel.NodeID ?? 0;
                orderId = 1;
            }
            else if (point == "top")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) - 1;
            }
            else if (point == "bottom")
            {
                parentId = targetModel.ParentID ?? 0;
                orderId = DataConverter.ToInt(targetModel.OrderID) + 1;
            }
            WeatherNodes model=new WeatherNodes();
            model.NodeID = id;
            model.OrderID = orderId;
            model.ParentID = parentId;
            return UpdateByModel(model);
        }    }
}
